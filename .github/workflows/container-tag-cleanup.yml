name: Container Tag Cleanup

on:
  workflow_call:
    inputs:
      package:
        description: "Name of the container registry package"
        required: true
        type: string
      filter:
        description: "A regular expression matching some specific tags for the container"
        required: false
        type: string
      keep_filter:
        description: "A regular expression matching any tags that should not be removed"
        required: false
        type: string
      keep_n:
        description: "How many of the most recently created and matched tags to keep"
        required: false
        default: -1
        type: number
      older_than:
        description: "Only remove tags at least as old as this number of days"
        required: false
        default: -1
        type: number

jobs:
  cleanup-tags:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup of tags
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const package = "${{ inputs.package }}";
            const filter = "${{ inputs.filter }}";
            const keepFilter = "${{ inputs.keep_filter }}";
            const keepN = ${{ inputs.keep_n }};
            const olderThan = ${{ inputs.older_than }};
            const olderThanTime = new Date();
            olderThanTime.setDate(olderThanTime.getDate() - olderThan);
            const filterRegex = filter.length === 0 ? /.*/ : new RegExp(filter);
            const keepFilterRegex = filter.length === 0 ? /.*/ : new RegExp(keepFilter);

            const containerImages = await github.paginate(github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg, {
                package_type: 'container',
                package_name: package,
                org: context.repo.owner,
                per_page: 100,
            });
            const matched = containerImages.filter(p => (p.metadata?.container?.tags ?? []).every(t => t.match(filter) !== null));
            const filteredMatched = matched.filter(p => p.metadata.container.tags.every(t => t.match(filter) === null));
            const sorted = filteredMatched.sort((a, b) => (new Date(a.created_at)).getTime() - (new Date(b.created_at).getTime()));
            const oldSorted = olderThan > 0 ? sorted.filter(p => (new Date(p.created_at)) < olderThanTime) : sorted;
            const toRemove = keepN >= 0 ? oldSorted.slice(keepN) : oldSorted;

            console.log(`Found ${toRemove.length} tagged images to remove`);
            for (const r of toRemove) {
                await github.rest.packages.deletePackageVersionForOrg({
                    package_type: 'container',
                    package_name: package,
                    org: context.repo.owner,
                    package_version_id: r.id,
                });
                console.log(`Deleted container image '${r.name}' (with tags: ${r.metadata.container.tags.join(', ')})`);
            }
